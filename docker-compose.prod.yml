###### MODELS CONTAINERS #############
models0: # PORT 8020
    image: tp33/django
    external_links:
      -  mysql:db
    volumes:
      - ./models/:/app
    command: bash -c "pip install -r requirements.txt && python manage.py makemigrations && python manage.py migrate && python manage.py loaddata db.json && mod_wsgi-express start-server --reload-on-changes ./models/wsgi.py"
    container_name: models0

models1: # PORT 8021
    image: tp33/django
    external_links:
      -  mysql:db
    volumes:
      - ./models/:/app
    command: bash -c "pip install -r requirements.txt && python manage.py makemigrations && python manage.py migrate && python manage.py loaddata db.json && mod_wsgi-express start-server --reload-on-changes ./models/wsgi.py"
    container_name: models1

models2: # PORT 8022
    image: tp33/django
    external_links:
      -  mysql:db
    volumes:
      - ./models/:/app
    command: bash -c "pip install -r requirements.txt && python manage.py makemigrations && python manage.py migrate && python manage.py loaddata db.json && mod_wsgi-express start-server --reload-on-changes ./models/wsgi.py"
    container_name: models2

###### EXP CONTAINERS #############
exp0: # PORT 8010
    image: tp33/django
    links:
      - modelsbal:models-api
      - kafka:kafka
      - es:es
    volumes:
      - ./exp/:/app
    command: bash -c "pip install -r requirements.txt && mod_wsgi-express start-server --reload-on-changes ./exp/wsgi.py"
    container_name: exp0

exp1: # PORT 8011
    image: tp33/django
    links:
      - modelsbal:models-api
      - kafka:kafka
      - es:es
    volumes:
      - ./exp/:/app
    command: bash -c "pip install -r requirements.txt && mod_wsgi-express start-server --reload-on-changes ./exp/wsgi.py"
    container_name: exp1

exp2: # PORT 8012
    image: tp33/django
    links:
      - modelsbal:models-api
      - kafka:kafka
      - es:es
    volumes:
      - ./exp/:/app
    command: bash -c "pip install -r requirements.txt && mod_wsgi-express start-server --reload-on-changes ./exp/wsgi.py"
    container_name: exp2


###### WEB CONTAINERS #############
web0: # PORT 8030
    image: tp33/django
    links:
      -  expbal:exp-api
      -  selenium
    volumes:
      - ./web/:/app
    command: bash -c "pip install -r requirements.txt && python manage.py collectstatic --noinput && mod_wsgi-express start-server --reload-on-changes ./web/wsgi.py && python manage.py test"
    container_name: web0
    environment:
      - SELENIUM_HOST=http://selenium:4444/wd/hub
      - TEST_SELENIUM='yest'

web1: # PORT 8031
    image: tp33/django
    links:
      -  expbal:exp-api
      -  selenium
    volumes:
      - ./web/:/app
    command: bash -c "pip install -r requirements.txt && python manage.py collectstatic --noinput && mod_wsgi-express start-server --reload-on-changes ./web/wsgi.py && python manage.py test"
    container_name: web1
    environment:
      - SELENIUM_HOST=http://selenium:4444/wd/hub
      - TEST_SELENIUM='yest'

web2: # PORT 8032
    image: tp33/django
    links:
      -  expbal:exp-api
      -  selenium
    volumes:
      - ./web/:/app
    command: bash -c "pip install -r requirements.txt && python manage.py collectstatic --noinput && mod_wsgi-express start-server --reload-on-changes ./web/wsgi.py && python manage.py test"
    container_name: web2
    environment:
      - SELENIUM_HOST=http://selenium:4444/wd/hub
      - TEST_SELENIUM='yest'

############## LOAD BALANCERS ###############
webbal:
   build: ./load/web
   links:
      -  web0:web0
      -  web1:web1
      -  web2:web2
   ports:
      -  "8000:8000"
   container_name: webbal

expbal:
   build: ./load/exp
   links:
      -  exp0:exp0
      -  exp1:exp1
      -  exp2:exp2
   container_name: expbal

modelsbal:
   build: ./load/models
   links:
      -  models0:models0
      -  models1:models1
      -  models2:models2
   container_name: modelsbal


###### SEARCH CONTAINERS ########
kafka:
   image: spotify/kafka
   container_name: kafka
   environment:
      ADVERTISED_HOST: kafka
      ADVERTISED_PORT: 9092
   hostname: kafka

es:
   image: elasticsearch:2.0
   container_name: es

batch:
   image: tp33/django
   container_name: batch
   links:
      - kafka:kafka
      - es:es
   command: bash -c "sleep 75 && echo 'kafka queueing' && python es_index.py"
   volumes:
      - ./batch/:/app

# Integration/end-to-end testing
selenium:
    image: selenium/standalone-chrome:2.48.2
    container_name: selenium
